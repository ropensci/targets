% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_dynamic_cross.R
\name{tar_dynamic_cross}
\alias{tar_dynamic_cross}
\alias{cross}
\title{Dynamic cross}
\usage{
tar_dynamic_cross(...)
}
\arguments{
\item{...}{Data frames with columns to represent targets and
elements to represent branches or buds. Column names must
be unique across all the data frames.}
}
\description{
Branch over all combinations of elements in a pattern.
}
\details{
In \code{\link[=tar_target]{tar_target()}}, \code{pattern = cross(x, y)}
creates one dynamic branch
for each combination of elements of \code{x} and \code{y}.
To test and experiment with this behavior outside
the pipeline, use the \code{tar_dynamic_cross()} function.
}
\examples{
# To use dynamic cross for real in a pipeline,
# call cross() in a target's pattern.
# The following code goes at the bottom of _targets.R.
tar_pipeline(
  tar_target(x, seq_len(2)),
  tar_target(y, head(letters, 2)),
  tar_target(dynamic, c(x, y), pattern = cross(x, y)) # 4 branches
)
# To explore dynamic cross() outside a pipeline,
# use the tar_dynamic_cross() helper function.
x <- data.frame(x = seq_len(2))
y <- data.frame(y = head(letters, 2))
tar_dynamic_cross(x, y)
# You can experiment with more complicated patterns.
# The following is a representation of pattern = cross(z, map(x, y)).
z <- data.frame(z = tail(LETTERS, 2))
tar_dynamic_cross(z, tar_dynamic_map(x, y))
}
\seealso{
Other Dynamic branching: 
\code{\link{tar_dynamic_head}()},
\code{\link{tar_dynamic_map}()},
\code{\link{tar_dynamic_sample}()},
\code{\link{tar_dynamic_tail}()}
}
\concept{Dynamic branching}
